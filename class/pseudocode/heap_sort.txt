// i is index
Max_Heapify(A,i){
  l = Left(i)
  r = right(i)
  if l <= A.heap_size and A[l] > A[i]{
    largest = l
  }else{
    larget = i
  }

  if r <= a.heap_size and A[r] > A[largest]{
    largest = r
  }

  if larget != i
    exchange A[i] with A[largest]
    Max_Heapify(A, largest)
}

Build_Max_Heap(A){
  A.heap_size = A.length
  for i = [A.length/2] downto 1
    Max_Heapify(A,i)
}

Heap_sort(A){
  Build_Max_Heap(A)
  for i = A.length downto 2
    exchange A[1] with A[i]
    A.heap_size = A.heap_size - 1
    Max_Heapify(A, 1)
}


Min_Heapify(A, i){
  l = LEFT(i)
  r = RIGHT(i)
  if l <= A.heap-size and A[l] < A[i]
    smallest = l
  else smallest = i

  if r <= A.heap-size and A[r] < A[smallest]
    smallest = r

  if smallest != i
    exchange A[i] with A[smallest]
    Min_Heapify(A, smallest)
}

Heap_sort2(A){
  Build_Max_Heap(A)
  for i = A.length downto 2
    exchange A[1] with A[i]
    A.heap_size = A.heap_size - 1
    Min_Heapify(A, 1)
}
